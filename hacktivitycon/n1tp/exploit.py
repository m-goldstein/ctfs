from pwn import *
from codecs import encode, decode
host = 'challenge.ctf.games'
port = 31921
n_padding = 50
flag = list(b'flag{'+b' '*n_padding)
idx = len(b'flag{')
last_idx = 0
valid_ascii = [chr(e).encode() for e in range(0x20, 0x7f)]
hashes = []
def _(v):
    pass
### If you want debug prints uncomment the next line
#debug = print
debug = _
try:
    conn = remote(host, port)
    buf = conn.recvline()
    enc = conn.recvline().decode().strip()[:-1]
    conn.recvuntil(b'?\n')
    do_check = True
    while do_check:
        conn.sendline(''.join(chr(e) for e in flag[:idx+1]).encode())
        (conn.recvline())
        hsh = conn.recvline().decode().strip()[:-1]
        debug(f'hash: {hsh}')
        for c in valid_ascii:
            tmp_flag = ''.join(chr(e) for e in flag[:idx]+[ord(c)]).encode()
            conn.sendline(tmp_flag)
            conn.recvuntil(b'?\n')
            conn.recvuntil(b'?\n')
            hsh = conn.recvline().decode().strip()[:-1]
            debug(f"got {hsh}")
            for j in range(0, len(enc)):
                if hsh[:j] != enc[:j]:
                    debug(f"last matching index: {j}")
                    break
                else:
                    last_idx = j
                    continue
            if last_idx//2 > idx:
                flag[idx] = ord(c)
                idx += 1
                break
            if "".join(chr(e) for e in flag[:idx]).endswith('11b'):
                real_flag = "".join(chr(e) for e in flag[:idx]) + '}'
                do_check = False
                break
        print(f'flag: {"".join(chr(e) for e in flag[:idx])}')
    print(f"flag: {real_flag}")
except Exception as e:
    print(f"Exception: {e}")
